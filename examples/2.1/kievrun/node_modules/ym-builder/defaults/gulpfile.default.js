var path = require('path'),
    ymb = require('ym-builder'),
    gulp = require('ym-builder').gulp,
    plugins = ymb.plugins,
    cfg = ymb.resolveBuildConfig();

var streams = [];

gulp.task('ym-clean', function (cb) {
    ymb.del(path.resolve(cfg.dest), { force: true }, cb);
});

gulp.task('ym-js', function () {
    return streams.push(gulp.src(cfg.src.js));
});

gulp.task('ym-css', function () {
    return streams.push(gulp.src(cfg.src.css)
        .pipe(plugins.css.optimize(cfg))
        .pipe(plugins.css.toModules(cfg))
    );
});

gulp.task('ym-templates', function () {
    return streams.push(gulp.src(cfg.src.templates)
        .pipe(plugins.templates.compile(cfg))
        .pipe(plugins.templates.toModules(cfg))
    );
});

gulp.task('ym-watch', function () {
    return gulp.watch([cfg.src.js, cfg.src.css, cfg.src.templates], ['ym-build']);
});

gulp.task('ym-build', ['ym-clean', 'ym-js', 'ym-css', 'ym-templates'/*, 'ym-images'*/], function () {
    var currentStreams = streams;

    streams = [];

    return ymb.mergeStreams(currentStreams)
        .pipe(plugins.modules.concat(cfg))
        .pipe(plugins.modules.helpers(cfg))
        .pipe(plugins.modules.modularSystem(cfg))
        .pipe(plugins.modules.closure(cfg))
        .pipe(plugins.modules.minify(cfg))
        .pipe(gulp.dest(path.resolve(cfg.dest)));
});