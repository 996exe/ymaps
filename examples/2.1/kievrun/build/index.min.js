(function (global){
var ym = { modules: global.ymaps.modules };

(function (modules){
var project = { DEBUG: false };
if (typeof modules == 'undefined' && typeof require == 'function') {
    var modules = require('ym');
}

modules.define('util.providePackage', ['system.mergeImports'], function (provide, mergeImports) {
    provide(function (srcPackage, packageArgs) {
        var packageProvide = packageArgs[0],
            packageModules = Array.prototype.slice.call(packageArgs, 1),
            ns = mergeImports.joinImports(srcPackage.name, {}, srcPackage.deps, packageModules);

        packageProvide(ns);
    });
});
})(ym.modules);

ym.modules.define('km.App', [
 'util.defineClass',
 'km.Map',
], function (provide, defineClass, Map) {
  var App = defineClass(function (el) {
    this._map = new Map(el);
    // this._setupListeners();
  }, {
    _setupListeners: function () {
      this._listeners = this._map.events.group();
    },
    _clearListeners: function () {
      this._listeners.removeAll()
    },
  });

  provide(App);
});

ym.modules.define('km.Data.Itinerary.finish', [
], function (provide) {
  provide(window.km.data.finishPoint);
});

ym.modules.define('km.Data.Itinerary', [
], function (provide) {
  provide(window.km.data.itinerary);
});

ym.modules.define('km.Data.Itinerary.start', [
], function (provide) {
  provide(window.km.data.startPoint);
});

ym.modules.define('km.Data.Poi', [
], function (provide) {
  provide(window.km.data.poi);
});

ym.modules.define('km.Data.Points', [
], function (provide) {
  provide(window.km.data.kmPins);
});

ym.modules.define('km.Map.Itinerary', [
 'util.defineClass',
 'GeoObjectCollection',
 'Placemark',
 'Polyline',
 'km.Data.Itinerary',
 'km.Data.Itinerary.start',
 'km.Data.Itinerary.finish',
 'km.Map.Points'
], function (provide, defineClass, GeoObjectCollection, Placemark, Polyline, ItineraryData, StartPoint, FinishPoint, Points) {

  var ACTIVE_ROUTE_COLOR = '#1e98ff';
  var ROUTE_COLOR = '#9e7afb';

  var Itinerary = defineClass(function (parent) {
    this._geoObjects = new GeoObjectCollection();
    parent.add(this._geoObjects);
  }, {
    render: function (data) {
      this._geoObjects
        .add(this._createItinerary());

    this._points = new Points(this._geoObjects);
    this._pointsGeoQuery = this._points.render();
    this._pointsGeoQuery.setOptions({
      iconColor: ROUTE_COLOR
    });

    this._geoObjects
      .add(this._createStartPoint());
    // .add(this._createFinishPoint());

      this._setupListeners();
    },
    clear: function () {
      this._clearListeners();
      this._points.render();
      this._geoObjects.removeAll();
    },
    _setupListeners: function () {
      this._listeners = this._itinerary.events.group()
        .add('mouseenter', this._handleMouseEnter, this)
        .add('mouseleave', this._handleMouseLeave, this);
      this._pointsGeoQuery
        .addEvents('mouseenter', this._handleMouseEnter, this)
        .addEvents('mouseleave', this._handleMouseLeave, this);
    },
    _clearListeners: function () {
      this._listeners.removeAll();
      this._pointsGeoQuery
        .removeEvents('mouseenter', this._handleMouseEnter, this)
        .removeEvents('mouseleave', this._handleMouseLeave, this);
    },
    _handleMouseEnter: function (e) {
        this._itinerary
          .options.set('strokeColor', ACTIVE_ROUTE_COLOR);
        this._pointsGeoQuery.setOptions({
          iconColor: ACTIVE_ROUTE_COLOR
        });
    },
    _handleMouseLeave: function (e) {
      this._itinerary
        .options.set('strokeColor', ROUTE_COLOR);
      this._pointsGeoQuery.setOptions({
        iconColor: ROUTE_COLOR
      });
    },
    _createItinerary: function () {
      return this._itinerary = new Polyline(ItineraryData, {}, {
        // strokeColor: '#1e98ff',
        strokeColor: '#9e7afb',
        strokeWidth: 4
      });
    },
    _createStartPoint: function () {
      return new Placemark(StartPoint, {}, {
        iconLayout: 'default#image',
        /*
        iconImageHref: 'http://kyivmarathon.org/wp-content/themes/WizzairMarathon-2016/maps/img/start_pin.png',
        iconImageSize: [51, 20],
        iconImageOffset: [-48, -12]
        */
        iconImageHref: 'images/7.png',
        iconImageSize: [32, 32],
        iconImageOffset: [-32, -16]
      });
    },
    _createFinishPoint: function () {
      return new Placemark(FinishPoint, {}, {
        iconLayout: 'default#image',
        iconImageHref: 'http://kyivmarathon.org/wp-content/themes/WizzairMarathon-2016/maps/img/finish_pin.png',
        iconImageSize: [51, 20],
        iconImageOffset: [5, -12]
      });
    }
  });

  provide(Itinerary);
});

ym.modules.define('km.Map.LegendControl', [
 'util.defineClass',
 'event.Manager',
 'collection.Item',
 'km.Data.Poi',
], function (provide, defineClass, EventManager, CollectionItem, PoiData) {
  var LegendControl = defineClass(function (options) {
    LegendControl.superclass.constructor.call(this, options);
    this.events = new EventManager();
    this._$content = null;
  }, CollectionItem, {
    onAddToMap: function (map) {
      LegendControl.superclass.onAddToMap.call(this, map);
      this.getParent().getChildElement(this).then(this._onGetChildElement, this);
    },
    onRemoveFromMap: function (oldMap) {
        if (this._$content) {
            this._clearListeners();
            this._$content.remove();
        }
        LegendControl.superclass.onRemoveFromMap.call(this, oldMap);
    },
    _onGetChildElement: function (parentDomContainer) {
        this._$content = $('<div class="km-legend"></div>')
          .append(this._createLegend())
          .appendTo(parentDomContainer);

        this._setupListeners();
    },

    _setupListeners: function () {
      this._$content
        .on('click', '.list-group-item', $.proxy(this._handleLegendItemClick, this));
    },

    _clearListeners: function () {
      this._$content
        .off('click')
    },

    _handleLegendItemClick: function (e) {
      e.preventDefault()
      var target = $(e.target)
      var groupId = target.data('id')

      if(this._activeItem) {
        this._activeItem.removeClass('active');
      }

      if(this._activeItem && this._activeItem.data('id') === groupId) {
        this._activeItem = null;
      } else {
        this._activeItem = target.addClass('active');
      }

      this.events.fire('activegroupchange', {
        target: this,
        groupId: groupId
      })
    },

    _createLegendItem: function (it, index) {
      return $([
        '<a href="#" class="list-group-item" data-id="' + it.id + '">',
          '<span class="badge">',
            it.items.length,
          '</span>',
          it.name,
        '</a>'
      ].join(''));
    },

    _createLegend: function () {
      return $('<ul class="list-group"></ul>')
        .append(PoiData.map(this._createLegendItem, this));
    },

    getDefaultParameters: function () {
      return {
        float: 'none',
        position: {
          right: 40,
          top: 40
        }
      };
    },
  });

  provide(LegendControl);
});

ym.modules.define('km.Map.LogoControl', [
 'util.defineClass',
 'collection.Item',
], function (provide, defineClass, CollectionItem) {
  var LogoControl = defineClass(function (options) {
    LogoControl.superclass.constructor.call(this, options);
    this._$content = null;
  }, CollectionItem, {
    onAddToMap: function (map) {
      LogoControl.superclass.onAddToMap.call(this, map);
      this.getParent().getChildElement(this).then(this._onGetChildElement, this);
    },
    onRemoveFromMap: function (oldMap) {
        if (this._$content) {
            this._clearListeners();
            this._$content.remove();
        }
        LogoControl.superclass.onRemoveFromMap.call(this, oldMap);
    },
    _onGetChildElement: function (parentDomContainer) {
        this._$content = $([
          // does not work in iframe
          // '<a href="http://yandex.ru">',
            '<img src="//yastatic.net/maps-beta/_/BPMHTAIlmc5kh6Tymb1I2mmfSAc.svg" style="width:86px;height:32px;" title="Яндекс" aria-label="Яндекс">',
          // '</a>'
          ].join(''))
          .appendTo(parentDomContainer);
    },

    getDefaultParameters: function () {
      return {
        float: 'none',
        position: {
          right: 40,
          bottom: 40
        }
      };
    },
  });

  provide(LogoControl);
});

ym.modules.define('km.Map', [
 'util.defineClass',
 'event.Manager',
 'Map',
 'km.Map.LegendControl',
 'km.Map.LogoControl',
 'km.Map.Itinerary',
 'km.Map.Poi',
], function (provide, defineClass, EventManager, Map, LegendControl, LogoControl, Itinerary, Poi) {
  provide(defineClass(function (el) {
    var map = this._map = this._createMap(el);
    this.events = new EventManager();
    this._legend = new LegendControl({
      float: 'none',
      position: {
        right: 40,
        top: 40
      }
    });
    map.controls.add(new LogoControl({
      float: 'none',
      position: {
        right: 20,
        bottom: 40
      }
    }));
    map.controls.add(this._legend);
    this._setupListeners();

    this._itinerary = new Itinerary(map.geoObjects);
    this._itinerary.render();
    this._poi = new Poi(map.geoObjects);
    this._poi.render();
  }, {
    _createMap: function (el) {
      var mapState = window.km.data.map.state;

      return new Map(el, {
        center: mapState.center,
        zoom: mapState.zoom,
        controls: []
      }, {
      });
    },
    _setupListeners: function () {
      this._listeners = this._legend.events.group()
        .add('activegroupchange', this._handleActiveGroupChange, this);
    },
    _clearListeners: function () {
      this._listeners.removeAll()
    },
    _handleActiveGroupChange: function (e) {
      this._poi.setActiveGroup(e.get('groupId'));
    }
  }));
});

ym.modules.define('km.Map.Poi', [
 'util.defineClass',
 'GeoObjectCollection',
 'Placemark',
 'km.Data.Poi'
], function (provide, defineClass, GeoObjectCollection, Placemark, PoiData) {
  var Poi = defineClass(function (parent) {
    this._geoObjects = new GeoObjectCollection();
    this._activeGroup = null;
    this._groups = {};
    parent.add(this._geoObjects);
  }, {
    render: function () {
      PoiData.map(this._createGroup, this)
        .forEach(function (geoObjects) {
          this._geoObjects.add(geoObjects);
        }, this);
    },
    clear: function () {
      this._geoObjects.removeAll();
    },
    setActiveGroup: function (id) {
      if(this._activeGroup) {
        this._activeGroup.options.set('visible', false);
      }

      if(this._activeGroup && id === this._activeGroup.properties.get('id')) {
        this._activeGroup = null;
      } else {
        if(this._groups[id]) {
          this._activeGroup = this._groups[id];
          this._groups[id].options.set('visible', true);
        }
      }
    },
    _createGroup: function (data) {
      return this._groups[data.id] = new GeoObjectCollection({
        properties: {
          name: data.name,
          id: data.id,
        },
        children: data.items.map(this._createPlacemark, this)
      }, {
        // preset: data.preset,
        visible: false,
        iconLayout: 'default#image',
        iconImageHref: data.icon,
        iconImageSize: [32, 32],
        iconImageOffset: [-16, -32]
      });
    },
    _createPlacemark: function (data, index) {
      return new Placemark(data.center, {}, {});
    },
  });

  provide(Poi);
});

ym.modules.define('km.Map.Points', [
 'util.defineClass',
 'GeoObjectCollection',
 'geoQuery',
 'Placemark',
 'km.Data.Points'
], function (provide, defineClass, GeoObjectCollection, geoQuery, Placemark, PointData) {
  var Points = defineClass(function (parent) {
    this._geoObjects = new GeoObjectCollection();
    parent.add(this._geoObjects);
  }, {
    render: function (data) {
      return geoQuery(PointData.map(this._createPlacemark, this))
        .addTo(this._geoObjects);
    },
    clear: function () {
      this._geoObjects.removeAll();
    },
    _createPlacemark: function (coords, index) {
      return new Placemark(coords, {
        iconContent: '<h6 class="km-sign">' + (index + 1) + '</h6>'
      }, {
        preset: 'islands#blueCircleIcon',
        /*
        iconLayout: 'default#image',
        iconImageHref: 'http://kyivmarathon.org/wp-content/themes/WizzairMarathon-2016/maps/img/km' + (index + 1) + '.png',
        iconImageSize: [30, 30],
        iconImageOffset: [-15, -30]
        */
      });
    },
  });

  provide(Points);
});

})(this);